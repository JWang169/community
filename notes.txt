BULLETS:
Improved the view code by using mixins with class-based views




accounts/models.py: 
    create the user model by importing "auth.models.User" and "auth.models.PermissionsMixin"

accounts/views.py:
    create a signup view, connect it to a UserCreateForm
    
accounts/forms.py:
    create a usercreateform by importing "UserCreationForm", set customized label for username and email

Simplesocial/urls.py:
    Connect the accounts main space to accounts. Because here I'm using the Django's build in user's model (Django.contrib.auth.urls) for accounts, I don't need to register any model in accounts/admin.py. 

Redirect to login and logout:
    1. Set up login to redirect your URL and log out redirect URL that the login and logout views are going to call. Set it in setting.py. 
    2. Add testpage and thankspage in views.py, so they can be connected to urls.py

##### bootstrap4 updated nabber class.

POST APP:
	1. _post.html: use this to inject it into other posts.html files. Sometimes if the single html page or single template is getting too big and overly complicated, use _post to break it up and inject it. 

GROUP APP:
	1. Slugify: if there is a string you want to use that as part of your url, it's going to be able to lowercase and add dashes instead of spaces
	2. Misaka: for link embedding. Have to install first



HEROKU:  

locate to the project directory first.
1. Create a requirement.txt to store all dependencies.
2. Install gunicorn (pip install gunicorn)
3. Run pip freeze. Then got all the dependencies. Copy all and paste into the requirement.txt file. (Just run pip freeze > requirements.txt, it automatically saved to the txt. )
4. Use git. the .git file is hidden file. Shift + command + . to show it.
5. There are certain files we don't want git to track, like anything specific to my machine. We will ignore those files. Copy paste all from .gitignore and create a new file under the project directory 
6. Create a Heroku app from Heroku command. Run: heroku create {appname}.
After creation, run the url (heroku open) or just copy paste it.
7. Run command: git push heroku master. This is to deploy my Django project

This step failed because of the static file. 

" django.core.exceptions.ImproperlyConfigured: You're using the staticfiles app without having set the STATIC_ROOT setting to a filesystem path.
remote: 
remote:  !     Error while running '$ python simplesocial/manage.py collectstatic --noinput'.
remote:        See traceback above for details.
remote: 
remote:        You may need to update application code to resolve this error.
remote:        Or, you can disable collectstatic for this application:
remote: 
remote:           $ heroku config:set DISABLE_COLLECTSTATIC=1
"


TO SOLVE THIS:
	go to the Django project, settings -> STATIC_URL add this line:
		STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

8. After that, update the project on github(just git add* blabla) and rerun git push heroku master

9. Run heroku open again. Get another error: Application error. It prompts to check my logs for details.

10. Run heroku logs --tail in command line. Got a lot of logs. The error means that I haven't tell heroku how I wanted to run my project. Create a proc file to fix this.

11. In the root of project directory, create proc file. Procfile without txt extension
 
 