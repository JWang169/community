BULLETS:
Improved the view code by using mixins with class-based views




accounts/models.py: 
    create the user model by importing "auth.models.User" and "auth.models.PermissionsMixin"

accounts/views.py:
    create a signup view, connect it to a UserCreateForm
    
accounts/forms.py:
    create a usercreateform by importing "UserCreationForm", set customized label for username and email

Simplesocial/urls.py:
    Connect the accounts main space to accounts. Because here I'm using the Django's build in user's model (Django.contrib.auth.urls) for accounts, I don't need to register any model in accounts/admin.py. 

Redirect to login and logout:
    1. Set up login to redirect your URL and log out redirect URL that the login and logout views are going to call. Set it in setting.py. 
    2. Add testpage and thankspage in views.py, so they can be connected to urls.py

##### bootstrap4 updated nabber class.

POST APP:
	1. _post.html: use this to inject it into other posts.html files. Sometimes if the single html page or single template is getting too big and overly complicated, use _post to break it up and inject it. 

GROUP APP:
	1. Slugify: if there is a string you want to use that as part of your url, it's going to be able to lowercase and add dashes instead of spaces
	2. Misaka: for link embedding. Have to install first



HEROKU:  locate to the project directory first.
1. Create a requirement.txt to store all dependencies.
2. Install gunicorn (pip install gunicorn)
3. Run pip freeze. Then got all the dependencies. Copy all and paste into the requirement.txt file. (Just run pip freeze > requirements.txt, it automatically saved to the txt. )
4. Use git. the .git file is hidden file. Shift + command + . to show it.
5. There are certain files we don't want git to track, like anything specific to my machine. We will ignore those files 